/**
 * @fileoverview gRPC-Web generated client stub for pb
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.6.1
// source: message.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as message_pb from './message_pb'; // proto import: "message.proto"


export class AdminServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreate = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/Create',
    grpcWeb.MethodType.UNARY,
    message_pb.CreateRequest,
    message_pb.CreateResponse,
    (request: message_pb.CreateRequest) => {
      return request.serializeBinary();
    },
    message_pb.CreateResponse.deserializeBinary
  );

  create(
    request: message_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null): Promise<message_pb.CreateResponse>;

  create(
    request: message_pb.CreateRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.CreateResponse) => void): grpcWeb.ClientReadableStream<message_pb.CreateResponse>;

  create(
    request: message_pb.CreateRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.CreateResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.AdminService/Create',
        request,
        metadata || {},
        this.methodDescriptorCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.AdminService/Create',
    request,
    metadata || {},
    this.methodDescriptorCreate);
  }

  methodDescriptorRemove = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/Remove',
    grpcWeb.MethodType.UNARY,
    message_pb.RemoveRequest,
    message_pb.RemoveResponse,
    (request: message_pb.RemoveRequest) => {
      return request.serializeBinary();
    },
    message_pb.RemoveResponse.deserializeBinary
  );

  remove(
    request: message_pb.RemoveRequest,
    metadata?: grpcWeb.Metadata | null): Promise<message_pb.RemoveResponse>;

  remove(
    request: message_pb.RemoveRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.RemoveResponse) => void): grpcWeb.ClientReadableStream<message_pb.RemoveResponse>;

  remove(
    request: message_pb.RemoveRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.RemoveResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.AdminService/Remove',
        request,
        metadata || {},
        this.methodDescriptorRemove,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.AdminService/Remove',
    request,
    metadata || {},
    this.methodDescriptorRemove);
  }

  methodDescriptorGet = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/Get',
    grpcWeb.MethodType.UNARY,
    message_pb.GetRequest,
    message_pb.GetResponse,
    (request: message_pb.GetRequest) => {
      return request.serializeBinary();
    },
    message_pb.GetResponse.deserializeBinary
  );

  get(
    request: message_pb.GetRequest,
    metadata?: grpcWeb.Metadata | null): Promise<message_pb.GetResponse>;

  get(
    request: message_pb.GetRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.GetResponse) => void): grpcWeb.ClientReadableStream<message_pb.GetResponse>;

  get(
    request: message_pb.GetRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.GetResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.AdminService/Get',
        request,
        metadata || {},
        this.methodDescriptorGet,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.AdminService/Get',
    request,
    metadata || {},
    this.methodDescriptorGet);
  }

  methodDescriptorList = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/List',
    grpcWeb.MethodType.UNARY,
    message_pb.ListRequest,
    message_pb.ListResponse,
    (request: message_pb.ListRequest) => {
      return request.serializeBinary();
    },
    message_pb.ListResponse.deserializeBinary
  );

  list(
    request: message_pb.ListRequest,
    metadata?: grpcWeb.Metadata | null): Promise<message_pb.ListResponse>;

  list(
    request: message_pb.ListRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.ListResponse) => void): grpcWeb.ClientReadableStream<message_pb.ListResponse>;

  list(
    request: message_pb.ListRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.ListResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.AdminService/List',
        request,
        metadata || {},
        this.methodDescriptorList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.AdminService/List',
    request,
    metadata || {},
    this.methodDescriptorList);
  }

  methodDescriptorListContact = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/ListContact',
    grpcWeb.MethodType.UNARY,
    message_pb.ListContactRequest,
    message_pb.ListContactResponse,
    (request: message_pb.ListContactRequest) => {
      return request.serializeBinary();
    },
    message_pb.ListContactResponse.deserializeBinary
  );

  listContact(
    request: message_pb.ListContactRequest,
    metadata?: grpcWeb.Metadata | null): Promise<message_pb.ListContactResponse>;

  listContact(
    request: message_pb.ListContactRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: message_pb.ListContactResponse) => void): grpcWeb.ClientReadableStream<message_pb.ListContactResponse>;

  listContact(
    request: message_pb.ListContactRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: message_pb.ListContactResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/pb.AdminService/ListContact',
        request,
        metadata || {},
        this.methodDescriptorListContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/pb.AdminService/ListContact',
    request,
    metadata || {},
    this.methodDescriptorListContact);
  }

  methodDescriptorListener = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/Listener',
    grpcWeb.MethodType.SERVER_STREAMING,
    message_pb.ListenerRequest,
    message_pb.ListenerResponse,
    (request: message_pb.ListenerRequest) => {
      return request.serializeBinary();
    },
    message_pb.ListenerResponse.deserializeBinary
  );

  listener(
    request: message_pb.ListenerRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<message_pb.ListenerResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/pb.AdminService/Listener',
      request,
      metadata || {},
      this.methodDescriptorListener);
  }

  methodDescriptorStreamMessage = new grpcWeb.MethodDescriptor(
    '/pb.AdminService/StreamMessage',
    grpcWeb.MethodType.SERVER_STREAMING,
    message_pb.StreamMessageRequest,
    message_pb.StreamMessageResponse,
    (request: message_pb.StreamMessageRequest) => {
      return request.serializeBinary();
    },
    message_pb.StreamMessageResponse.deserializeBinary
  );

  streamMessage(
    request: message_pb.StreamMessageRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<message_pb.StreamMessageResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/pb.AdminService/StreamMessage',
      request,
      metadata || {},
      this.methodDescriptorStreamMessage);
  }

}

